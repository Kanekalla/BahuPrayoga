---
title: "NityaSruti"
author: "Kanekalla"
date: "September 8, 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
Get the list of methods that are available in a specific package for a given class of data
```{r }
intersect(sapply(strsplit(as.character(methods(class="DESeqDataSet")), ","), `[`, 1), ls("package:DESeq2"))
```
## Including Plots
You can also embed plots, for example:
```{r }
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
print(fviz_screeplot(pca, ncp=nDim.plot))
source("https://bioconductor.org/biocLite.R")
pkgs<-c("Rsamtools","GenomicAlignments","parallel","GenomicFeatures","rtracklayer","FactoMineR",
"biomaRt","GenomicRanges","TxDb.Mmusculus.UCSC.mm10.knownGene","BiocParallel","DESeq2",
"edgeR","calibrate","xlsx","RColorBrewer")
for(i in 1:length(pkgs)){
if(require(pkgs[i], character.only = TRUE)==FALSE){ install.packages(pkgs[i]);library(pkgs[i], character.only = TRUE)}
else { library(pkgs[i],character.only = TRUE)}
}
?rlogTransformation
AT2raw<-read.delim("Aging_AT2_comb_granges.all.counts.txt",header = T)
dim(AT2raw)
head(AT2raw)
AT2Data<-data.frame(AT2raw[,6:length(colnames(AT2raw))])
AT2Data$M02.AT2.24M.F0.2<-NULL
AT2Data$M94.AT2.04M.F10.6<-NULL
dim(AT2Data)
Celldata<-colnames(AT2Data)
#type = gsub("^(.*?)\\.?\\d.*$", "\\1", CelTypes)
#celltype_date=gsub("\\.\\d+","",Celldata)
#celltype=gsub("\\.\\.$","",Celldata)
flu=factor(ifelse(grepl("F0",Celldata),"F0",
ifelse(grepl("F10",Celldata),"F10",
ifelse(grepl("F150",Celldata),"F150",NA))))
age = factor(ifelse(grepl("01M", Celldata), "1M",
ifelse(grepl("04M", Celldata),"04M",
ifelse(grepl("09M", Celldata), "09M",
ifelse(grepl("12M", Celldata), "12M",
ifelse(grepl("18M", Celldata), "18M",
ifelse(grepl("24M", Celldata), "24M",NA)))))))
# Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
(coldata <- data.frame(row.names=colnames(AT2Data), age,flu))
dds <- DESeqDataSetFromMatrix(countData=AT2Data, colData=coldata, design=~age+flu)
dds
getwd()
setwd("/Users/kra804/Documents/Aging_Mouse_2016/All_Aging_DataSets/Analysis/Naive/AT2")
AT2raw<-read.delim("Aging_AT2_comb_granges.all.counts.txt",header = T)
dim(AT2raw)
head(AT2raw)
AT2Data<-data.frame(AT2raw[,6:length(colnames(AT2raw))])
AT2Data$M02.AT2.24M.F0.2<-NULL
AT2Data$M94.AT2.04M.F10.6<-NULL
dim(AT2Data)
Celldata<-colnames(AT2Data)
#type = gsub("^(.*?)\\.?\\d.*$", "\\1", CelTypes)
#celltype_date=gsub("\\.\\d+","",Celldata)
#celltype=gsub("\\.\\.$","",Celldata)
flu=factor(ifelse(grepl("F0",Celldata),"F0",
ifelse(grepl("F10",Celldata),"F10",
ifelse(grepl("F150",Celldata),"F150",NA))))
age = factor(ifelse(grepl("01M", Celldata), "1M",
ifelse(grepl("04M", Celldata),"04M",
ifelse(grepl("09M", Celldata), "09M",
ifelse(grepl("12M", Celldata), "12M",
ifelse(grepl("18M", Celldata), "18M",
ifelse(grepl("24M", Celldata), "24M",NA)))))))
# Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
(coldata <- data.frame(row.names=colnames(AT2Data), age,flu))
dds <- DESeqDataSetFromMatrix(countData=AT2Data, colData=coldata, design=~age+flu)
dds
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlog(dds, blind=TRUE)
head(assay(rld), 3)
assay.rld.t <- t(assay(rld))
pca <- PCA(assay.rld.t, graph=FALSE) # ncp =5 number of dimensions # graph = true result is displayed
eigenvalues <- pca$eig
head(eigenvalues[, 1:2])
barplot(eigenvalues[, 2], names.arg=1:nrow(eigenvalues),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
# Add connected line segments to the plot
lines(x = 1:nrow(eigenvalues), eigenvalues[, 2],
type="b", pch=19, col = "red")
print(fviz_contrib(pca, choice = "var", axes = 1, top = nDim.plot))
library(factoextra)
source("https://bioconductor.org/biocLite.R")
pkgs<-c("Rsamtools","GenomicAlignments","parallel","GenomicFeatures","rtracklayer","FactoMineR","factoextra",
"biomaRt","GenomicRanges","TxDb.Mmusculus.UCSC.mm10.knownGene","BiocParallel","DESeq2",
"edgeR","calibrate","xlsx","RColorBrewer")
for(i in 1:length(pkgs)){
if(require(pkgs[i], character.only = TRUE)==FALSE){ install.packages(pkgs[i]);library(pkgs[i], character.only = TRUE)}
else { library(pkgs[i],character.only = TRUE)}
}
print(fviz_contrib(pca, choice = "var", axes = 1, top = nDim.plot))
print(fviz_screeplot(pca, ncp=nDim.plot))
pca <<- prcomp(AT2Data,scale=T)
percentVar <<- pca$sdev^2/sum(pca$sdev^2)
pca.eig <- (pca$sdev)^2
variance.in.percent <- pca.eig*100/sum(pca.eig)
cumvar.in.percent <- cumsum(variance.in.percent)
pca.eig.df <- data.frame(eig = pca.eig, variance = variance.in.percent, cumvariance = cumvar.in.percent)
#eig.val <- get_eigenvalue(pca)
pca.var <- get_pca_var(pca)
pca.ind <- get_pca_ind(pca)
d <- data.frame(geneSymbol=rownames(pca.var$contrib))
d <- cbind(d,pca.var$contrib)
if(!all(intgroup %in% names(designM))) {
stop("the argument 'intgroup' should specify columns of designM")
}
intgroup.df <- as.data.frame(designM[, intgroup, drop = FALSE])
group <- factor(apply(intgroup.df, 1, paste, collapse = " : "))
d <- data.frame(PC1 = pca$x[, 1], PC2 = pca$x[, 2], PC3 = pca$x[, 3], group = group, intgroup.df, names = colnames(vstMat))
pdf("test.pdf")
par(mar=c(5,5,4,8),cex.lab=1.5)
### scree plot
nDim.plot <- min(30,nrow(pca.eig.df))
xat <- barplot(pca.eig.df[1:nDim.plot, "variance"], names.arg=1:nDim.plot, main = "Variances", xlab = "Principal Components", ylab = "Percentage of variances", col ="steelblue")
lines(x = xat, pca.eig.df[1:nDim.plot, "variance"], type="b", pch=19, col = "red")
abline(h = 1*100/sum(pca.eig), lty = 2, col = "red", lwd=2)
### loading plot
# Plot the correlation circle
#a <- seq(0, 2*pi, length = 100)
#plot( cos(a), sin(a), type = 'l', col="gray", xlab = "PC1",  ylab = "PC2")
#abline(h = 0, v = 0, lty = 2)
#arrows(0, 0, pca.var$coord[, 1], pca.var$coord[, 2], length = 0.1, angle = 15, code = 2)
#text(pca.var$coord[, 1], pca.var$coord[, 2], labels=rownames(pca.var$coord), cex = 1, adj=1)
### score plot
plot(x=NULL,y=NULL, xlim = range(d$PC1), ylim = range(d$PC2), type = "n", main=sub("^\\.","",extra,perl=T),cex.main=1.5,
xlab=paste0("PC1: ", round(percentVar[1] * 100,2), "% variance"),
ylab=paste0("PC2: ", round(percentVar[2] * 100,2), "% variance"))
invisible(lapply(levels(d$group),function(x){ points(subset(d,group==x,select="PC1")[,1],subset(d,group==x,select="PC2")[,1],col=colSet[x],pch=16,cex=1.2)  }))
legend("right",legend=names(colSet),fill = NULL,inset = -0.19,xpd = NA,cex=1.5,pch=16,border =NA,col = colSet)
#library("FactoMineR")
#pca <- PCA(dat.plot, graph = FALSE)
print(fviz_screeplot(pca, ncp=nDim.plot))
print(fviz_contrib(pca, choice = "var", axes = 1, top = nDim.plot))
print(fviz_contrib(pca, choice = "var", axes = 2, top = nDim.plot))
print(fviz_contrib(pca, choice = "var", axes = 1:2, top = nDim.plot))
print(fviz_contrib(pca, choice = "ind", axes = 1, top = nDim.plot))
print(fviz_contrib(pca, choice = "ind", axes = 2, top = nDim.plot))
print(fviz_contrib(pca, choice = "ind", axes = 1:2, top = nDim.plot))
print(fviz_pca_var(pca, col.var="contrib") + scale_color_gradient2(low="white", mid="blue", high="red", midpoint=50) + theme_minimal())
#print(fviz_pca_ind(pca, label = "none", col.ind = patientcolors ,habillage = group, addEllipses = T) + theme_minimal())
tryCatch(print(fviz_pca_ind(pca, label = "none", col.ind = patientcolors ,habillage = group, addEllipses = T) + theme_minimal()), error = function(e) e, finally = loginfo(sprintf("")) )
dev.off()
head(pca$var$contrib)
assay.rld.t <- t(assay(rld))
pca <- PCA(assay.rld.t, graph=FALSE) # ncp =5 number of dimensions # graph = true result is displayed
eigenvalues <- pca$eig
head(eigenvalues[, 1:2])
barplot(eigenvalues[, 2], names.arg=1:nrow(eigenvalues),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="steelblue")
# Add connected line segments to the plot
lines(x = 1:nrow(eigenvalues), eigenvalues[, 2],
type="b", pch=19, col = "red")
head(pca$ind$coord)
head(pca$ind$cos2)
pdf("PCA_factoextra_colors.pdf")
fviz_pca_ind(pca, col.ind="cos2") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=0.50)
dev.off()
pdf("screeplot.pdf")
barplot(eigenvalues[, 2], names.arg=1:nrow(eigenvalues),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="mistyrose")
# Add connected line segments to the plot
lines(x = 1:nrow(eigenvalues), eigenvalues[, 2],
type="b", pch=19, col = "blue")
dev.off()
fviz_screeplot(pca, ncp=10)
pca <- PCA(assay(rld), graph=FALSE) # ncp =5 number of dimensions # graph = true result is displayed
eigenvalues <- pca$eig
head(eigenvalues[, 1:2])
head(pca$ind$coord)
pdf("screeplot.pdf")
barplot(eigenvalues[, 2], names.arg=1:nrow(eigenvalues),
main = "Variances",
xlab = "Principal Components",
ylab = "Percentage of variances",
col ="mistyrose")
# Add connected line segments to the plot
lines(x = 1:nrow(eigenvalues), eigenvalues[, 2],
type="b", pch=19, col = "blue")
dev.off()
pca <- PCA(AT2Data, graph=FALSE)
eigenvalues <- pca$eig
head(eigenvalues[, 1:2])
head(pca$ind$coord)
#Cos2 : quality of representation of individuals on the principal components
head(pca$ind$cos2)
#Contribition of individuals to the princial components
head(pca$ind$contrib)
# using factoextra shading plot
#pdf("PCA_factoextra_colors.pdf")
#fviz_pca_ind(pca, col.ind="cos2") +
#  scale_color_gradient2(low="white", mid="blue",
#                        high="red", midpoint=0.50)
#dev.off()
#
# with circles in it ??
#pdf("factoextra_age.pdf")
#fviz_pca_ind(pca, label="none", habillage=age,
#             addEllipses=TRUE, ellipse.level=0.5)
#dev.off()
# another one with circles
#pdf("flu.pdf")
#fviz_pca_ind(pca,  label="none", habillage=flu)
#dev.off()
#barplot
fviz_screeplot(pca, ncp=10)
?PCA
pca <- PCA(AT2Data, graph=FALSE,scale.unit = TRUE)
eigenvalues <- pca$eig
head(eigenvalues[, 1:2])
head(pca$ind$coord)
#Cos2 : quality of representation of individuals on the principal components
head(pca$ind$cos2)
#Contribition of individuals to the princial components
head(pca$ind$contrib)
fviz_screeplot(pca, ncp=5)
fviz_pca_ind(pca,  label="none")
head(rld)
flu
head(assay(rld), 3)
plotPCA()
?plotPCA
nrow(rld)
dds
dds <- dds[ rowSums(counts(dds)) > 1, ]
nrow(dds)
rld <- rlog(dds, blind=TRUE)
head(assay(rld), 3)
plotPCA(rld, intgroup = c("age","flu"),
ntop = nrow(rld), returnData = FALSE)
(data <- plotPCA(rld,ntop = nrow(rld), intgroup = c("Age","Flu"), returnData=TRUE))
(data <- plotPCA(rld, intgroup = c("Age","Flu"), ntop = nrow(rld),returnData=TRUE))
colData(dds)
(data <- plotPCA(rld, intgroup = c("age","flu"), ntop = nrow(rld),returnData=TRUE))
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=age, shape=flu)) + geom_point(size=5) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
ggplot(data, aes(PC2, PC3, color=age, shape=flu)) + geom_point(size=5) +
xlab(paste0("PC2: ",percentVar[2],"% variance")) +
ylab(paste0("PC3: ",percentVar[3],"% variance")) +
coord_fixed()
percentVar
dds <- estimateSizeFactors(dds)
se <- SummarizedExperiment(log2(counts(dds, normalized=TRUE) + 1),
colData=colData(dds))
plotPCA( DESeqTransform( se ) )
plotPCA( DESeqTransform( se ), intgroup=c("age","flu") )
ggplot(data, aes(PC1, PC2, color=flu, shape=age)) + geom_point(size=5) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
DESeq2::plotPCA()
DESeq2::plotPCA
showMethods("plotPCA")
DESeq2::plotPCA:
:
DESeq2::plotPCA::
plotPCA4<-function (x, intgroup = "condition", ntop = 500)
{
rv = rowVars(exprs(x))
select = order(rv, decreasing = TRUE)[seq_len(ntop)]
pca = prcomp(t(exprs(x)[select, ]))
fac = factor(apply(pData(x)[, intgroup, drop = FALSE], 1,
paste, collapse = " : "))
if (length(fac) >= 3)
#colours = brewer.pal(nlevels(fac), "YlOrRd")
colours = brewer.pal(nlevels(fac), "Paired")
else colours = c("darkred", "darkblue")
xyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$x),
pch = 16, cex = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
text = list(levels(fac)), rep = FALSE)))
}
pca = prcomp(t(assay(rld)[select, ]))
plotPCA4(rld,intgroup = c("age","flu"),ntop = nrow(rld))
library(gplots)
library(RColorBrewer)
library(lattice)
library(genefilter)
plotPCA4(rld,intgroup = c("age","flu"),ntop = nrow(rld))
plotPCA4(assay(rld),intgroup = c("age","flu"),ntop = nrow(rld))
plotPCA4(exprs(rld),intgroup = c("age","flu"),ntop = nrow(rld))
plotPCA4(exprs(AT2Data),intgroup = c("age","flu"),ntop = nrow(rld))
ggplot(data, aes(PC1, PC2, color=flu, shape=age)) + geom_point(size=5) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
(data <- plotPCA(rld, intgroup = c("age","flu"), ntop = 1000,returnData=TRUE))
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=flu, shape=age)) + geom_point(size=5) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
(data <- plotPCA(rld, intgroup = c("age","flu"), ntop = 5000,returnData=TRUE))
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=flu, shape=age)) + geom_point(size=5) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
(data <- plotPCA(rld, intgroup = c("age","flu"), ntop = 10000,returnData=TRUE))
percentVar <- round(100 * attr(data, "percentVar"))
library("ggplot2")
ggplot(data, aes(PC1, PC2, color=flu, shape=age)) + geom_point(size=5) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
ggplot(data, aes(PC1, PC2, color=flu, shape=age)) + geom_point(size=4) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
ggplot(data, aes(PC1, PC2, color=age, shape=flu)) + geom_point(size=4) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
ggplot(data, aes(PC1, PC2, color=flu, shape=age)) + geom_point(size=4) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
